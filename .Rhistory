?combat
?ComBat
?prince
library(swamp)
?prince
?help
batch.dir = "~/Desktop/COPD/lgrc_redux/"
batch <- read.delim(paste0(batch.dir,"batch.txt",header=TRUE,sep="\t")
)
batch <- read.delim(paste0(batch.dir,"batch.txt"),header=TRUE,sep="\t")
head(batch)
le(batch[,1])
le(batch[,2])
le(batch[,3])
le(batch[,5])
le(batch[,4])
source('~/.active-rstudio-document', echo=TRUE)
batch.dir = "~/Desktop/COPD/lgrc_redux/"
matrix(unlist(strsplit(as.character(batch$SubjectID),"_")),ncol=2,byrow=TRUE)[,1]
batch$tissueid = matrix(unlist(strsplit(as.character(batch$SubjectID),"_")),ncol=2,byrow=TRUE)[,1]
factor(matrix(unlist(strsplit(as.character(batch$Scan_Date)," ")),ncol=2,byrow=TRUE)[,1])
batch$Scan_Date = factor(matrix(unlist(strsplit(as.character(batch$Scan_Date)," ")),ncol=2,byrow=TRUE)[,1])
colnames(ge_final)
batch$Scan_Date
batch$tissueid
sum(batch$tissueid %in% colnames(ge_final))
dim(batch)
length(ge.cols)
ge.cols
lgrc_qc
length(lgrc_qc)
sum(batch$tissueid %in% lgrc_qc)
batch[!(batch$tissueid %in% lgrc_qc),]
lgrc_qc[!(lgrc_qc %in% batch$tissueid)]
oddballs <- lgrc_qc[!(lgrc_qc %in% batch$tissueid)]
colnames(ge_file)
sum(batch$tissueid %in% colnames(ge_file))
dim(batch)
sum(grepl("pseudogene",ge_final$description))
?grep
grep("pseudogene",ge_final$description,value=T)
tmp
dim(tmp)
tmp$description[tmp$ProbeName %in% tmp$ProbeName[pseudo.indx]]
tmp$hgnc_symbol[tmp$ProbeName %in% tmp$ProbeName[pseudo.indx]]
tmp[tmp$ProbeName %in% tmp$ProbeName[pseudo.indx],c(1:2,172:174)]
tmp[tmp$ProbeName %in% tmp$ProbeName[pseudo.indx],c(1:2,166:172)]
meta <- read.delim(paste0(data.dir,
"lgrc.merged.clinical.data.clean.fixed.geno.ge.txt"),header=T,sep="\t")
head(meta)
meta.tmp <- read.delim(paste0(data.dir,
"lgrc.merged.clinical.data.clean.fixed.geno.ge.txt"),header=T,sep="\t")
meta <- merge(meta.tmp,batch,by="tissueid")
dim(meta)
length(lgrc_qc)
head(meta)
le(meta$tissueid)
le(batch$tissueid)
dim(meta.tmp)
meta.tmp2 <- meta.tmp[meta.tmp$tissueid %in% lgrc_qc,]
dim(meta.tmp2)
meta <- merge(meta.tmp2,batch,by="tissueid")
dim(meta)
meta$diagmaj
grp = as.integer(meta$diagmaj == "2-COPD/Emphysema")
grp
mod = cbind(rep(1,length(grp)),grp)
mod
mod0 = cbind(rep(1,length(grp)))
?sva
ge.batch <- ge_final[colnames(ge_final) %in% meta$tissueid,]
dim(ge.batch)
dim(ge_final)
ge.batch <- ge_final[,colnames(ge_final) %in% meta$tissueid]
dim(ge_final)
dim(ge.batch)
colnames(ge.batch)
n.sv = num.sv(ge.batch,mod,method="leek")
n.sv
?num.sv
svaobj = sva(ge.batch,mod,mod0,method="irw")
typeof(ge.batch)
as.numeric(ge.batch)
typeof(ge.batch[,1])
svaobj = sva(as.matrix(ge.batch),mod,mod0,method="irw")
svaobj$n.sv
xx <- as.matrix(ge.batch)
head(xx)
n.sv = num.sv(as.matrix(ge.batch),mod,method="leek")
n.sv
?n.sv
?num.sv
svaobj$sv
heatmap(svaobj$sv)
dim(svaobj$sv)
svaobj$pprob.gam
rle(svaobj$pprob.gam)
rle(sort(svaobj$pprob.gam))
hist(svaobj$pprob.gam,breaks=50)
hist(svaobj$pprob.b,breaks=50)
p1 <- c(seq(0.5,0.8,by=0.1),0.85,0.9)
p1
215*p1
cels <- read.delim("~/Desktop/COPD/LGRC_QC/lgrc_cel_files.txt",header=F,sep="\t")
head(cels)
cels$v1
cels$V1
?strsplit
s1 <- strsplit(cels,"DEFAULT/")
s1 <- strsplit(cels,"DEFAULT*")
s1 <- strsplit(cels,"DEFAULT")
s1 <- strsplit(cels$V1,"DEFAULT/")
s1 <- strsplit(as.character(cels$V1),"DEFAULT/")
s1
m1 <- matrix(s1,ncol=2)
m1
m1 <- data.frame(s1,ncol=2)
m1
m1 <- (s1,ncol=2)
?matrix
?as.matrix.data.frame
?data.frame
m1 <- matrix(unlist(s1),ncol=2)
m1
m1[,2]
unlist(s1)
m1 <- matrix(unlist(s1),ncol=2,byrow=TRUE)
m1
x1 <- m1[,2]
x1
s2 <- strsplit(x1,"_")
m2 <- matrix(unlist(s2),ncol=2,byrow=TRUE)
m2
subj_cel <- m2[,1]
lgrc_qc
length(intersect(subj_cel,lgrc_qc))
IQR
?IQR
165*c(.40,.55,.65,.8)
175*c(.40,.55,.65,.8)
p1*300
p1*305
345*p1
cels2 <- read.delim("~/Desktop/lgrc_cel2.txt",header=F,sep="\t")
z1 <- strsplit(as.character(cels2$V1),"DEFAULT/")
head(z1)
z2 <- matrix(unlist(z1),ncol=2,byrow=TRUE)
head(z2)
z2
zx <- grep("Gene_Expression_array",z1,value=TRUE)
zx
dim(m1)
head(m1)
zx
z2 <- strsplit(zx,"_")
head(z2)
z3 <- matrix(unlist(z2),ncol=5,byrow=TRUE)
head(z3)
subj_cel2 <- z3[,4]
length(subj_cel2)
length(intersect(subj_cel2,lgrc_qc))
head(batch)
le
length(intersect(batch$tissueid,subj_cel))
length(intersect(batch$tissueid,subj_cel2))
length(batch$tissueid)
names(meta.tmp)
length(intersect(batch$tissueid,meta.tmp$tissueid))
batch.meta <- intersect(batch$tissueid,meta.tmp$tissueid)
li <- function(x){length(intersect(x))}
li(batch.meta,lgrc_qc)
li <- function(x,y){length(intersect(x,y))}
li(batch.meta,lgrc_qc)
length(lgrc_qc)
setdiff(batch.meta,lgrc_qc)
dim(ge_file)
setdiff(subj_cel2,colnames_gefile[,-c(1:2)])
length(setdiff(subj_cel2,colnames(ge_file[,-c(1:2)])))
length(setdiff(,colnames(ge_file[,-c(1:2)]),subj_cel2))
length(setdiff(colnames(ge_file[,-c(1:2)]),subj_cel2))
584-811
584-611
head(colnames(ge_files))
head(colnames(ge_file))
?pc.adj
library(ComBat)
library(comBat)
library(swamp)
?swamp
?prince
pc.adj = prince(ge.batch,meta[,c("GENDER","age","cigever","smokever","pkyrs","fev1prd1","goldstd","diagmaj","Scan_Date")], permute=TRUE, top=50)
head(ge.batch)
rownames(ge_final)
colnames(ge_final)
ge.batch <- as.matrix(ge_final[,colnames(ge_final) %in% meta$tissueid])
rownames(ge.batch) <- ge_final$Ensembl_Gene_ID
head(ge.batch)
pc.adj = prince(ge.batch,meta[,c("GENDER","age","cigever","smokever","pkyrs","fev1prd1","goldstd","diagmaj","Scan_Date")], permute=TRUE, top=50)
colnames(meta)
meta.batch <- meta[,c("GENDER","age","cigever","smokever","pkyrs","fev1prd1","goldstd","diagmaj","Scan_Date")]
rownames(meta.batch) <- meta$tissueid
pc.adj = prince(ge.batch,meta.batch, permute=TRUE, top=50)
prince.plot(prince=pc.adj)
?prince.plot
pc.adj = prince(ge.batch,meta.batch, permute=TRUE, top=10)
prince.plot(prince=pc.adj)
?prince.plot
prince.plot(prince=pc.adj,Rsquared=TRUE)
pc.adj = prince(ge.batch,meta.batch, permute=TRUE, top=25)
prince.plot(prince=pc.adj,Rsquared=TRUE)
?prince.plot
?prince
pc.adj$linp
pc.adj$linp["Scan_Date",]
pc.adj$rsquaredperm["Scan_Date",]
prince.plot(prince=pc.adj,Rsquared=TRUE)
pc.adj$rsquared["Scan_Date",]
?prince
pc.adj$linpperm
pc.adj$linpperm["ScanDate",]
pc.adj$linpperm["Scan_Date",]
min(pc.adj$linpperm["Scan_Date",])
?pc.plot
?prince.plot
?swamp
prince.plot
min(pc.adj$linp["Scan_Date",])
pc.adj2 = prince(ge.batch,meta.batch, top=25)
min(pc.adj2$linp["Scan_Date",])
pc.adj2$linp["Scan_Date",] - pc.adj$linp["Scan_Date",]
?prince.var.plot
?prince
prince
prince.plot(prince=pc.adj,Rsquared=TRUE)
prince.plot(prince=pc.adj)
?prince.plot
?heat.colors
pdf("batch_effects.pdf",height=5,width=7)
prince.plot(prince=pc.adj)
dev.off()
q()
colnames(ge_final)
library(matrixeqtl)
library(MatrixEQTL)
?MatrixEQTL
ge.cols
dim(ge_final)
names(ge_final)[-ge.cols]
new.order <- c(names(ge_final)[-ge.cols],names(ge_final)[ge.cols])
names(ge_final)[-ge.cols]
new.order
throw.out <- names(which(table(ge_merge$ProbeName) > 1))
ge_final <- ge_merge[!(ge_merge$ProbeName %in% throw.out),!(colnames(ge_merge) %in% c("ensembl_gene_id","rowid"))]
write.table(ge_final[,c(1,ge.cols),file=paste0(ge.dir,"expression_QC.txt"),row.names=F,sep="\t")
new.order <- c(names(ge_final)[-ge.cols],names(ge_final)[ge.cols])
write.table(ge_final[,new.order],file="expression_QC_probe_info.txt",row.names=F,quote=F,sep="\t")
meta.tmp <- read.delim(paste0(batch.dir,
"lgrc.merged.clinical.data.clean.fixed.geno.ge.txt"),header=T,sep="\t")
#remove samples that fail genotyping QC
batch.dir
data.dir
data.dir
batch.dir
batch.dir = paste0(data.dir,"QC/")
batch.dir
meta.tmp <- read.delim(paste0(batch.dir,
"lgrc.merged.clinical.data.clean.fixed.geno.ge.txt"),header=T,sep="\t")
#remove samples that fail genotyping QC
?options
width
pvalueCutoff
?GOstats
library(GOstats)
?Hypergeometric
?GOstats
?params
?GOHyperGParams
GOHyperGParams
?hyperGTest
setwd("~/Desktop/pipeline_packrat_clean_cluster/")
base.dir = "./"
data.dir = paste0(base.dir,"data/")
ge.dir <- paste0(base.dir,"data/expression/")
geno.dir <- paste0(base.dir,"data/genotype/")
rdata.dir = paste0(base.dir,"RData/")
network.dir = paste0(base.dir,"code/network/")
anno.dir = paste0(data.dir,"genotype/omni_annotation/")
library(data.table)
eqtl.file <- paste0(data.dir,"lgrc_eqtls_FDR_0.1.txt")
source(paste0(network.dir,"eqtl_network_analysis_v4_cluster.R"))
eqtl_tmp <- data.table(read.delim(eqtl.file,header=TRUE,sep="\t"),sep="\t",header=TRUE)
h1 <- data.table(read.delim(paste0(anno.dir,"HumanOmni1-Quad_v1-0_H_rsids.txt"),header=TRUE,sep="\t"))
#setkey(h1,Name)
h25 <- data.table(read.delim(paste0(anno.dir,"HumanOmni2.5-8v1_C_rsids.txt"),header=TRUE,sep="\t"))
hall <- unique(rbind(h1,h25),by=c("Name","RsID"))
setnames(hall,"Name","SNP")
setkey(hall,SNP)
setkey(eqtl_tmp,SNP)
eqtl_copd <- merge(eqtl_tmp,hall,all.x=TRUE)
dim(eqtl_copd)
dim(eqtl_tmp)
eqtl_copd[duplicated(eqtl_copd[,c("SNP","Ensembl_ID"),with=FALSE],by=NULL)]
eqtl_copd[J("rs9264602")]
setkey(eqtl_copd,RsID)
eqtl_copd <- eqtl_copd[!J("rs56010430,rs9264602")]
setkey(eqtl_copd,SNP)
#check to make sure there are no other redundancies
dim(eqtl_copd[duplicated(eqtl_copd[,c("SNP","Ensembl_ID"),with=FALSE],by=NULL)])[1]
dim(eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)])[1]
eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)]
eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)]
eqtl_copd[J("rs9264602")]
eqtl_copd <- merge(eqtl_tmp,hall,all.x=TRUE)
dim(eqtl_copd)
eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)]
setkey(eqtl_copd,gene)
setkey(eqtl_copd,SNP)
eqtl_copd[!duplicated(gene)][J(c("")]
eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)]
eqtl_tmp <- data.table(read.delim(eqtl.file,header=TRUE,sep="\t"),sep="\t",header=TRUE)
h1 <- data.table(read.delim(paste0(anno.dir,"HumanOmni1-Quad_v1-0_H_rsids.txt"),header=TRUE,sep="\t"))
#setkey(h1,Name)
h25 <- data.table(read.delim(paste0(anno.dir,"HumanOmni2.5-8v1_C_rsids.txt"),header=TRUE,sep="\t"))
hall <- unique(rbind(h1,h25),by=c("Name","RsID"))
setnames(hall,"Name","SNP")
setkey(hall,SNP)
setkey(eqtl_tmp,SNP)
eqtl_copd <- merge(eqtl_tmp,hall,all.x=TRUE)
dim(eqtl_copd)
dim(eqtl_tmp)
eqtl_tmp[duplicated(eqtl_tmp)]
?duplicated
eqtl_tmp[duplicated(eqtl_tmp[,c("SNP","gene"),with=FALSE],by=NULL)]
eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)]
eqtl_copd[J("rs9264602")]
setkey(eqtl_copd,RsID)
eqtl_copd <- eqtl_copd[!J("rs56010430,rs9264602")]
eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)]
eqtl_copd[J("rs10843891")]
setkey(eqtl_copd,SNP)
eqtl_copd[J("rs10843891")]
setkey(eqtl_copd,RsID)
eqtl_copd[grep(",",RsID)]
eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)]
eqtl_copd[duplicated(eqtl_copd[,c("RsID","gene"),with=FALSE],by=NULL)]
eqtl_copd[J("rs9264602")]
eqtl_tmp <- data.table(read.delim(eqtl.file,header=TRUE,sep="\t"),sep="\t",header=TRUE)
h1 <- data.table(read.delim(paste0(anno.dir,"HumanOmni1-Quad_v1-0_H_rsids.txt"),header=TRUE,sep="\t"))
#setkey(h1,Name)
h25 <- data.table(read.delim(paste0(anno.dir,"HumanOmni2.5-8v1_C_rsids.txt"),header=TRUE,sep="\t"))
hall <- unique(rbind(h1,h25),by=c("Name","RsID"))
setnames(hall,"Name","SNP")
setkey(hall,SNP)
setkey(eqtl_tmp,SNP)
eqtl_copd <- merge(eqtl_tmp,hall,all.x=TRUE)
eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)]
eqtl_copd[J("rs10843891")]
eqtl_copd[J("rs9264602")]
setkey(eqtl_copd,RsID)
eqtl_copd <- eqtl_copd[!J("rs56010430,rs9264602")]
eqtl_copd <- eqtl_copd[!J("rs10843891,rs41464451")]
setkey(eqtl_copd,SNP)
dim(eqtl_copd[duplicated(eqtl_copd[,c("SNP","gene"),with=FALSE],by=NULL)])[1]
library(gwascat)
intr = gwrngs[ intersect(getRsids(gwrngs), eqtl_copd$RsID) ]
cat_snps <- mcols(intr)[,c(22,8,15,18,28)]
dcat <- data.table(as.data.frame(cat_snps))
setnames(dcat,"SNPs","RsID")
setkey(dcat,"RsID")
setkey(eqtl_gcc,"RsID")
dcat.all <- eqtl_gcc[dcat]
intr = gwrngs[ intersect(getRsids(gwrngs), eqtl_copd$RsID) ]
cat_snps <- mcols(intr)[,c(22,8,15,18,28)]
dcat <- data.table(as.data.frame(cat_snps))
setnames(dcat,"SNPs","RsID")
setkey(dcat,"RsID")
setkey(eqtl_copd,"RsID")
dcat.all <- eqtl_copd[dcat]
dim(dcat.all)
length(unique(dcat.all$RsID))
q()
rm(list=ls())
ls()
load("~/Desktop/blood_eqtl/pipeline/RData/eQTL_network_analysis_cluster_FDR10.RData")
ls()
dim(eqtl_gcc)
head(eqtl_gcc)
dim(duplicated(eqtl_gcc))
tab.true
names(eqtl_brim_out$brim.object)
eqtl_brim_out$brim.object$Qcoms
dim(eqtl_gcc)
ls()
?font
base.dir <- "~/Desktop/pipeline_packrat_final_public/"
ge.dir <- paste0(base.dir,"data/expression/")
qc.data.dir <- paste0(base.dir,"data/QC/")
data.dir <- paste0(base.dir,"data/")
rdata.dir <- paste0(base.dir,"RData/")
geno.dir <- paste0(base.dir,"data/genotype/")
network.dir = paste0(base.dir,"code/network/")
anno.dir = paste0(data.dir,"genotype/omni_annotation/")
load(paste0(rdata.dir,"eQTL_network_analysis_cluster_FDR10.RData"))
load("~/Desktop/pipeline_packrat_final_public/RData/copd_gwasWed_Jun_24_2015_1101.RData")
eqtl_gcc[!duplicated(hgnc_symbol)[blue.memb==18]$hgnc_symbol
]
eqtl_gcc[!duplicated(hgnc_symbol)][blue.memb==18]$hgnc_symbol
names(eqtl_gcc)
library(data.table)
eqtl_gcc[!duplicated(hgnc_symbol)][blue.memb==18]$hgnc_symbol
sort(eqtl_gcc[!duplicated(hgnc_symbol)][blue.memb==18]$hgnc_symbol)
test.set <- c("ILB1","TGFB","ITGB8","ATF2","HDAC2","AP1","cJUN","MMP14","HDAC")
sort(eqtl_gcc[!duplicated(hgnc_symbol)][blue.memb==18]$hgnc_symbol) %in% test.set
intersect(sort(eqtl_gcc[!duplicated(hgnc_symbol)][blue.memb==18]$hgnc_symbol),test.set)
meta.stuff <- read.delim("~/Desktop/COPD/pipeline_packrat_clean_cluster/data/lgrc.merged.clinical.data.clean.fixed.geno.ge.txt",header=TRUE,sep="\t")
names(meta.stuff)
levels(meta.stuff$RACE)
unique(meta.stuff$RACE)
TUFM
load("~/Desktop/test_bundle/pipeline_packrat_final_gwas_in/RData/copd_gwasWed_Jun_24_2015_1101.RData")
data.table()
library(data.table)
eqtl_gcc_info[hgnc_symbol=="TUFM"]
eqtl_gcc_info[CHR.GENE==16][band=="p11.2"]
eqtl_gcc_info[CHR.GENE==16][band=="p11.2"][!duplicated(hgnc_symbol)]
eqtl_gcc_info[CHR.GENE==16][band=="p11.2"][!duplicated(hgnc_symbol)][red.memb==3]
eqtl_gcc_info[red.memb==3][band="p11.2"][!duplicated(hgnc_symbol)]
eqtl_gcc_info[red.memb==3][band=="p11.2"][!duplicated(hgnc_symbol)]
eqtl_gcc_info[red.memb==3][CHR.GENE==17][band=="p11.2"][!duplicated(hgnc_symbol)]
q()
setwd("~/Dropbox/petejohn/copd_blood_eq"
)
q()
version
setwd("~/Dropbox/condordev/condor/")
library(data.table)
?setnames
library(condor)
?create.condor.object
r = c(1,1,1,2,2,2,3,3,3,4,4);
b = c(1,2,3,1,2,4,2,3,4,3,4);
reds <- c("Alice","Sue","Janine","Mary")
blues <- c("Bob","John","Ed","Hank")
elist <- data.frame(red=reds[r],blue=blues[b])
condor.object <- create.condor.object(elist)
condor.object <- condor.cluster(condor.object)
condor.object
condor.plot.communities(condor.object,c("darkgreen","darkorange"),2)
dt0 <- data.table(condor.object$edges)
setnames(dt0,c("red","blue"),c("SNP","gene"))
dt1 <- data.table(condor.object$red.memb)
setnames(dt1,c("SNP","red.memb"))
dt2 <- data.table(condor.object$blue.memb)
setnames(dt2,c("gene","blue.memb"))
dt3 <- merge(dt0,dt1,by="SNP",all.x=TRUE)
eqtl_object <- merge(dt3,dt2,by="gene",all.x=TRUE)
setkey(eqtl_object,"SNP")
eqtl_all <- data.table(eqtl_object[!is.na(SNP)])
#this groups red and blue nodes in the same community. very important
eqtl_block <- eqtl_all[blue.memb==red.memb]
if(nlevels(eqtl_block$SNP) != length(unique(eqtl_block$SNP))){
print("warning: empty levels in SNP column. This may cause silent issues with plotting.")}
#select all links that connect nodes in the same community
setkey(eqtl_block,"blue.memb","red.memb")
#make new index for each node that will correspond to it's row/col number
red_tmp <- data.table(rindx=1:nlevels(eqtl_block$SNP),SNP=unique(eqtl_block$SNP))
red_indx <- merge(red_tmp,unique(eqtl_block,by="SNP")[,c("SNP","red.memb"),with=FALSE],by="SNP")
red_indx[,red.com.size:=length(unique(SNP)),by=red.memb]
red_indx[red.com.size > 1,rindx:=sample(x=rindx),by=red.memb][,red.memb:=NULL,]
setkey(red_indx,"SNP")
blue_tmp <- data.table(bindx=1:nlevels(eqtl_block$gene),gene=unique(eqtl_block$gene))
blue_indx <- merge(blue_tmp,unique(eqtl_block,by="gene")[,c("gene","blue.memb"),with=FALSE],by="gene")
#shuffle nodes within each community to make density homogeneous
blue_indx[,blue.com.size:=length(unique(gene)),by=blue.memb]
blue_indx[blue.com.size > 1,bindx:=sample(x=bindx),by=blue.memb][,blue.memb:=NULL,]
setkey(blue_indx,"gene")
if(dim(red_indx)[1] != nlevels(eqtl_all$SNP) && dim(blue_indx)[1] != nlevels(eqtl_all$gene)){
print("Warning! not all nodes in block!")
}
#in the unlikely event a node is only connected to nodes in OTHER comms
#if(nlevels(eqtl_all$SNP) != nlevels(eqtl_all$SNP)){
#  tmp = setdiff(levels(eqtl_all$SNP),levels(eqtl_all$SNP))
m1 <- merge(eqtl_all,red_indx,by="SNP",all=TRUE)
#setkey(m1,"gene")
m2 <- merge(m1,blue_indx,by="gene",all=TRUE)
m2[red.memb != blue.memb][plot(rindx,bindx,cex=point.size,xaxt="n",yaxt="n",
xaxs="i",yaxs="i",ylim=c(0,max(m2$bindx)+1),
xlim=c(0,max(m2$rindx)+1),xlab="",ylab="",pch=19)]
#plot links that connect nodes in same communities
m2[red.memb==blue.memb][points(rindx,bindx,cex=point.size,pch=19,
col=color_list[red.memb])]
point.size=2
color_list=c("darkgreen","darkorange")
m2[red.memb != blue.memb][plot(rindx,bindx,cex=point.size,xaxt="n",yaxt="n",
xaxs="i",yaxs="i",ylim=c(0,max(m2$bindx)+1),
xlim=c(0,max(m2$rindx)+1),xlab="",ylab="",pch=19)]
#plot links that connect nodes in same communities
m2[red.memb==blue.memb][points(rindx,bindx,cex=point.size,pch=19,
col=color_list[red.memb])]
box(lwd=2)
mtext(xlab,side=3,font=2,cex=2.5,padj=-0.25)
mtext(ylab,side=2,font=2,cex=2.5,padj=-0.5)
browser()
cs <- cumsum(rle(sort(m2[!duplicated(SNP)]$red.memb))$lengths)
cs <- cumsum(rle(sort(m2[!duplicated(SNP)]$red.memb))$lengths)
cs
lens <- rle(sort(m2[!duplicated(SNP)]$red.memb))$lengths
lpts <- cs - lens/2
axis(1,at=lpts,labels=1:length(color_list),lwd.ticks=-0.1,cex.axis=1.25,padj=0.25,font=2)
?browser
condor.plot.communities(condor.object,c("darkgreen","darkorange"),2)
q()
